#version 410 core

layout (location = 0) in vec3 pos;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;

out Vert_Out
{
	vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} vert_out;

uniform mat4 proj;
uniform mat4 view;
uniform mat4 model;

uniform vec3 lightPos;
uniform vec3 viewPos;

uniform sampler2D displMap;

void main()
{
	vert_out.FragPos = vec3(model * vec4(pos, 1.0));

	vert_out.TexCoords = texCoords;

	mat3 norm_mat = transpose(inverse(mat3(model)));

	vec3 T = normalize(norm_mat * tangent);
	vec3 N = normalize(norm_mat * normal);
	T = normalize(T - dot(T, N) * N);
	vec3 B = cross(T,N);

	mat3 TBN = transpose(mat3(T, B, N));
	vert_out.TangentLightPos = TBN * lightPos;
	vert_out.TangentViewPos = TBN * viewPos;
	vert_out.TangentFragPos = TBN * vert_out.FragPos;
	
	// Position
	gl_Position = proj * view * model * vec4(pos, 1.0);
	//gl_Position = vec4(pos, 1.0);
};