#version 410 core

layout (location=0) out vec4 color;

in Vert_Out
{
	vec3 FragPos;
    vec2 TexCoords;
    vec3 TangentLightPos;
    vec3 TangentViewPos;
    vec3 TangentFragPos;
} frag_in;

uniform sampler2D normalMap;

uniform float heightScale;

uniform vec3 lightPos;
uniform vec3 viewPos;

vec3 modelColor = vec3(1.0, 1.0, 1.0);

void main()
{
	vec3 normal = texture(normalMap, frag_in.TexCoords).rgb;
	normal = normalize(normal * 2.0 - 1.0);

	vec3 ambient = 0.1 * modelColor;
	
	vec3 lightDir = normalize(frag_in.TangentLightPos - frag_in.TangentFragPos);
	
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * modelColor;

	vec3 viewDir = normalize(frag_in.TangentViewPos - frag_in.TangentFragPos);
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);

    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(0.2) * spec;

	color = vec4(ambient + diffuse + specular, 1.0);
};