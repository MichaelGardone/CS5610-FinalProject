#version 330 core

layout (location=0) out vec4 frag_color;

in vertex_info {
    vec3 fragPos;
	vec3 normal;
	vec2 texCoords;
	vec4 fragPosLS; // LS = Light space
} fs_in;

uniform sampler2D shadowMap;
uniform sampler2D diffuse;

uniform vec3 lightPos;
uniform vec3 viewPos;

float PCF(vec4 fragLightPos)
{
	vec3 projCoords = fragLightPos.xyz / fragLightPos.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r;
	float currDepth = projCoords.z;

	vec3 normal = normalize(fs_in.normal);
	vec3 lightDir = normalize(lightPos - fs_in.fragPos);
	float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);

	for(int x = -1; x <= 1; x++)
	{
		for(int y = -1; y <= 1; y++)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x,y) * texelSize).r;
			shadow += currDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0;
	if(projCoords.z > 1.0)
		shadow = 0.0;
	
	return shadow;
}

void main()
{
	vec3 color = texture(diffuse, fs_in.texCoords).rgb;
	vec3 normal = normalize(fs_in.normal);
	vec3 lightColor = vec3(0.3);

	// Ambient
	vec3 ambient = 0.3 * color;
	
	// diffuse
	vec3 lightDir = normalize(lightPos - fs_in.fragPos);
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * lightColor;

	// specular
	vec3 viewDir = normalize(viewPos - fs_in.fragPos);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = 0.0;
	vec3 halfwayDir = normalize(lightDir + viewDir);
	spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
	vec3 specular = spec * lightColor;

	// shadow
	float shadow = PCF(fs_in.fragPosLS);

	vec3 lighting = (ambient +  (1.0 - shadow) * (diffuse + specular)) * color;
	//vec3 lighting = (ambient + diffuse + specular) * color;
	
	frag_color = vec4(lighting, 1.0);
};